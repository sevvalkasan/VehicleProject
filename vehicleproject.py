# -*- coding: utf-8 -*-
"""VehicleProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kqK0pCVynPm6eFZ0dgExWNkoDyxw5r00
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, VotingClassifier, IsolationForest
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from imblearn.over_sampling import SMOTE
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data = pd.read_csv('engine_data.csv')
data.info(3)

print(data.info())
print(data.describe())

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

plt.figure(figsize=(15, 10))
data.hist(bins=30, edgecolor='black')
plt.show()


data['Fuel to Coolant Pressure Ratio'] = data['Fuel pressure'] / (data['Coolant pressure'] + 1e-5)

data['Lub Oil to Coolant Temp Ratio'] = data['lub oil temp'] / (data['Coolant temp'] + 1e-5)

data['RPM Coolant Pressure Product'] = data['Engine rpm'] * data['Coolant pressure']

data['Pressure Sum'] = data['Lub oil pressure'] + data['Fuel pressure']

plt.figure(figsize=(12, 10))
correlation_matrix = data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Feature Correlation Matrix')
plt.show()

corr_threshold = 0.5
high_corr_pairs = correlation_matrix.abs().unstack().sort_values(kind="quicksort", ascending=False)
high_corr_pairs = high_corr_pairs[high_corr_pairs < 1]
high_corr_pairs = high_corr_pairs[high_corr_pairs > corr_threshold]
print("Highly Correlated Feature Pairs:")
print(high_corr_pairs)

selected_features = ['Engine rpm', 'Lub oil pressure', 'Fuel pressure', 'Coolant pressure', 'Fuel to Coolant Pressure Ratio', 'Lub Oil to Coolant Temp Ratio', 'RPM Coolant Pressure Product', 'Pressure Sum']
X = data[selected_features]
y = data['Engine Condition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

smote = SMOTE(random_state=42)
X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_balanced)
X_test_scaled = scaler.transform(X_test)


gb_model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)

xgb_model = XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42, eval_metric='logloss')

ensemble_model = VotingClassifier(estimators=[('gb', gb_model), ('rf', rf_model), ('xgb', xgb_model)], voting='soft')

ensemble_model.fit(X_train_scaled, y_train_balanced)

conf_matrix = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Anomali'], yticklabels=['Normal', 'Anomali'])
plt.xlabel('Tahmin Edilen')
plt.ylabel('Gerçek')
plt.title('Karışıklık Matrisi')
plt.savefig('confusion_matrix.png') 
plt.show()


iso_forest = IsolationForest(n_estimators=100, contamination=0.05, random_state=42)
iso_forest.fit(X_train_scaled)
anomaly_predictions = iso_forest.predict(X_test_scaled)

data['Anomaly'] = iso_forest.predict(scaler.transform(X))
anomalies_count = sum(data['Anomaly'] == -1)
anomalies_ratio = anomalies_count / len(data)
print(f"Toplam Anomali Sayısı: {anomalies_count}")
print(f"Verideki Anomalilerin Oranı: {anomalies_ratio:.2%}")

plt.figure(figsize=(10, 6))
plt.scatter(data['Engine rpm'], data['Pressure Sum'], c=data['Anomaly'], cmap='coolwarm', alpha=0.6)
plt.xlabel('Engine rpm')
plt.ylabel('Pressure Sum')
plt.title('Anomaly Detection (Engine rpm vs Pressure Sum)')
plt.show()